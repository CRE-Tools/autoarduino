using System;
using System.Collections.Generic;
using System.IO.Ports; //Api Compatibility Level = (.Net Framework, NET_Unity_4_8)
using System.Threading.Tasks;
using UnityEngine;
using UnityEngine.Events;

public class ArduinoInput : MonoBehaviour
{
    #region Declarations
    private static ArduinoInput instance;
    private static readonly Queue<Action> _executionQueue = new Queue<Action>();
    private readonly Queue<string> _serialPorts = new Queue<string>();
    private SerialPort _serialPort;
    private string _inputValue;

    [SerializeField] private bool _searchForDeviceOnStart = true;
    [SerializeField] private bool _readDevice = true;
    [SerializeField] private bool _printStatus = false;

    [SerializeField] private UnityEvent<string> onTryConnection;
    [SerializeField] private UnityEvent<string> onTryConnectionSuccess;
    [SerializeField] private UnityEvent<string> onTryConnectionFail;
    [SerializeField] private UnityEvent<string> onConnectionLost;
    [SerializeField] private UnityEvent<string> onStatusUpdate;
    [SerializeField] private UnityEvent<string> onInputContent;
    #endregion

    #region PublicMethods
    public static void AddListener_TryConnection(UnityAction<string> func) => instance.onTryConnection.AddListener(func);
    public static void AddListener_TryConnectionSuccess(UnityAction<string> func) => instance.onTryConnectionSuccess.AddListener(func);
    public static void AddListener_TryConnectionFail(UnityAction<string> func) => instance.onTryConnectionFail.AddListener(func);
    public static void AddListener_ConnectionLost(UnityAction<string> func) => instance.onConnectionLost.AddListener(func);
    public static void AddListener_StatusUpdate(UnityAction<string> func) => instance.onStatusUpdate.AddListener(func);
    public static void AddListener_InputContent(UnityAction<string> func) => instance.onInputContent.AddListener(func);

    public static void LookForDevice() => instance.LocateArduino();
    public static void CanReadDevice(bool canRead = true) => instance._readDevice = canRead;
    #endregion

    #region UnityMonoBehaviour
    private void Awake()
    {
        if (instance == null) instance = this;
        else Destroy(instance);
    }

    private void Start()
    {
        if (_searchForDeviceOnStart) LocateArduino();
    }

    private void Update()
    {
        DequeueExecutions();

        if (!_readDevice) return;

        if (_serialPort != null && _serialPort.IsOpen)
        {
            GetValue();
            onInputContent.Invoke(_inputValue);

            ConnectionVerify();
        }
        else _inputValue = string.Empty;
    }

    private void OnApplicationQuit()
    {
        if (_serialPort != null && _serialPort.IsOpen)
            _serialPort.Close();
    }

    private void OnDestroy() => instance = null;

    #endregion

    #region UpdateCycle
    private void DequeueExecutions()
    {
        lock (_executionQueue)
            while (_executionQueue.Count > 0)
                _executionQueue.Dequeue().Invoke();
    }

    private void GetValue()
    {
        try { _inputValue = _serialPort.ReadLine(); }
        catch { }
    }

    private void ConnectionVerify()
    {
        try
        {
            int tempBytes = _serialPort.BytesToRead;
        }
        catch
        {
            StatusUpdate(onConnectionLost,
            "lost connection",
            "Arduino has been disconnected");

            _serialPort.Close();
            _serialPort = null;
            return;
        }
    }
    #endregion

    #region Connection
    private void LocateArduino()
    {
        if (_serialPort != null)
        {
            StatusUpdate(onTryConnectionFail,
            "canceled",
            "Arduino is already connected");

            return;
        }

        _serialPorts.Clear();

        string[] ports = SerialPort.GetPortNames();

        StatusUpdate(onTryConnection,
            "searching for device",
            $"Available ports: {string.Join(", ", ports)}");

        foreach (string port in ports) _serialPorts.Enqueue(port);

        ProcessQueue();
    }

    private async void ProcessQueue()
    {
        await Task.Run(() =>
        {
            while (_serialPorts.Count > 0)
            {
                string port = _serialPorts.Dequeue();

                if (TestPort(port)) ConnectToPort(port);
            }

            if (_serialPort == null)
                StatusUpdate(onTryConnectionFail,
                    "connection fail",
                    "No Arduino found!");
        });
    }

    private bool TestPort(string port)
    {
        using (SerialPort testPort = new SerialPort(port, 9600))
            try
            {
                testPort.Open();
                testPort.ReadTimeout = 500;

                string response = testPort.ReadByte().ToString();
                testPort.Close();

                return (response != null);
            }
            catch { return (false); }
    }

    private void ConnectToPort(string port)
    {
        _serialPort = new SerialPort(port, 9600);
        _serialPort.DtrEnable = false;
        _serialPort.ReadTimeout = 10;
        _serialPort.Open();

        StatusUpdate(onTryConnectionSuccess,
            "connected",
            $"Arduino found on port: {port}");
    }
    #endregion

    #region StatusAndActions
    private string StatusUpdate(UnityEvent<string> _event, string title, string content)
    {
        string msg = $"[{title.ToUpper()}]\r\n {content}";

        if (_printStatus)
            Debug.Log(msg);

        InvokeEvents(onStatusUpdate, msg);
        InvokeEvents(_event, msg);

        return msg;
    }

    private void InvokeEvents(UnityEvent<string> _event, string msg) =>
        _executionQueue.Enqueue(() => _event.Invoke(msg));
    #endregion
}